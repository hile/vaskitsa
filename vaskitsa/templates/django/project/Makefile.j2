PYTHON_VERSION := $(shell python3 -c 'import sys; print("{}.{}".format(sys.version_info.major, sys.version_info.minor))')
PACKAGE = {{ project_name }}
SHELL := /bin/bash
ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
VERSION = $(shell awk -F\' '/^__version__/ {print $$2}' ${ROOT_DIR}/config/version.py)

VENV_PYTHON := $(shell which python${PYTHON_VERSION})
VENV_DIR := ${HOME}/.venv/${PACKAGE}
VENV_BIN := ${VENV_DIR}/bin

PATH := ${PATH}:${VENV_BIN}
PIP := pip${PYTHON_VERSION}
REQUIREMENTS_DEVELOPER = ${ROOT_DIR}/requirements/developer.txt
REQUIREMENTS_PRODUCTION = ${ROOT_DIR}/requirements/base.txt
REQUIREMENTS_TEST = ${ROOT_DIR}/requirements/test.txt

ENVIRONMENT := developer

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
    PLATFORM = LINUX
endif
ifeq ($(UNAME_S),Darwin)
    PLATFORM = MACOS
endif

all: virtualenv developer-requirements migrations loaddata static

clean:
	rm -rf build .pytest_cache
	find . -name '*.egg-info' -print0|xargs -0 rm -rf
	find . -name '*.eggs' -print0|xargs -0 rm -rf
	find . -name '__pycache__' -print0|xargs -0 rm -rf
	find . -name htmlcov -print0|xargs -0 rm -rf
	find . -name '*.pyc' -print0|xargs -0 rm -rf

distclean: clean
	rm -rf "${VENV_DIR}"

${VENV_BIN}:
	python3 -m venv  --prompt='${PACKAGE}' ${VENV_DIR}

virtualenv: ${VENV_BIN}

# Sign python in virtualenv to avoid firewall warnings
virtualenv-codesign:
	@test -n "${CODE_SIGNING_CERTIFICATE}" || (echo "Code signing certificate name not defined" && exit 1)
	codesign -f -s "${CODE_SIGNING_CERTIFICATE}" ${VENV_BIN}/python3 || true

setup-database:
	psql -d postgres -f examples/databases.sql

initial-migrations:
	./manage.py makemigrations --empty tukkimies

requirements: virtualenv
	source ${VENV_BIN}/activate; ${PIP} install -r ${REQUIREMENTS_PRODUCTION}

developer-requirements: virtualenv
	source ${VENV_BIN}/activate; ${PIP} install -r ${REQUIREMENTS_DEVELOPER}

test-requirements: virtualenv
	source ${VENV_BIN}/activate; ${PIP} install -r ${REQUIREMENTS_TEST}

migrations:
	source ${VENV_BIN}/activate; ./manage.py makemigrations --noinput --verbosity=0

migrate:
	source ${VENV_BIN}/activate; ./manage.py migrate --database=default

run:
	source ${VENV_BIN}/activate; ./manage.py runserver 0.0.0.0:8000

lint:
	flake8 | sort
	pylint

test:
	echo 'ALTER USER tukkimies CREATEDB; DROP DATABASE IF EXISTS test_tukkimies;' | psql -d postgres
	pytest

static:
	install -d static
	./manage.py collectstatic --noinput --verbosity=0

.PHONY: doc virtualenv migrations loaddata static test demo staging release
